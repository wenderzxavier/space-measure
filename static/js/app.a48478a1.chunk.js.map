{"version":3,"sources":["logo.svg","app.js"],"names":["App","getRandomRgb","num","Math","round","random","miro","onReady","addListener","widget","console","log","updateStyle","a","board","widgets","get","id","update","style","background","handleClick","type","allStickers","allFrames","allCurves","allLines","className","src","logo","alt","onClick","constants","SHAPE","then","forEach","ReactDOM","render","document","getElementById"],"mappings":"wMAAe,MAA0B,iC,4CCSzC,SAASA,IAQP,SAASC,IACP,IAAIC,EAAMC,KAAKC,MAAM,SAAWD,KAAKE,UAIrC,MAAO,QAHCH,GAAO,IAGK,MAFXA,GAAO,EAAK,KAEU,MADjB,IAANA,GACkC,IAZ5CI,KAAKC,SAAQ,WACXD,KAAKE,YAAY,qBAAqB,SAACC,GACrCC,QAAQC,IAAI,qBACZD,QAAQC,IAAIF,SAYhB,IAAMG,EAAW,uCAAG,4BAAAC,EAAA,sEACGP,KAAKQ,MAAMC,QAAQC,IAAI,CAAEC,GAAI,wBADhC,OACZR,EADY,OAElBC,QAAQC,IAAI,iBACZL,KAAKQ,MAAMC,QAAQG,OAAO,CACxBD,GAAIR,EAAO,GAAGQ,GACdE,MAAM,2BACDV,EAAO,GAAGU,OADV,IAEHC,WAAW,0BAAD,OAA4BnB,IAA5B,+DAGdS,QAAQC,IAAI,iBAVM,2CAAH,qDAaXU,EAAW,uCAAG,kCAAAR,EAAA,sEACMP,KAAKQ,MAAMC,QAAQC,IAAI,CAAEM,KAAM,UADrC,cACdC,EADc,OAElBb,QAAQC,IAAIY,GAFM,SAGIjB,KAAKQ,MAAMC,QAAQC,IAAI,CAAEM,KAAM,UAHnC,cAGdE,EAHc,OAIlBd,QAAQC,IAAIa,GAJM,UAKIlB,KAAKQ,MAAMC,QAAQC,IAAI,CAAEM,KAAM,UALnC,eAKdG,EALc,OAMlBf,QAAQC,IAAIc,GANM,UAOGnB,KAAKQ,MAAMC,QAAQC,IAAI,CAAEM,KAAM,SAPlC,QAOdI,EAPc,OAQlBhB,QAAQC,IAAIe,GARM,4CAAH,qDAoBjB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,iDACA,wBAAQC,QAAS,kBAAMV,KAAvB,wBACA,wBAAQU,QAAS,WAdrBzB,KAAKQ,MAAMC,QAAQC,IAAI,CAAEM,KAAMU,UAAUC,QAASC,MAAK,SAACnB,GACtDL,QAAQC,IAAI,iBACZI,EAAQoB,SAAQ,SAAC1B,GACfG,EAAYH,EAAOQ,WAWnB,+BAMRmB,IAASC,OAAO,cAACrC,EAAD,IAASsC,SAASC,eAAe,U","file":"static/js/app.a48478a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\nfunction App() {\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n  });\n\n  function getRandomRgb() {\n    var num = Math.round(0xffffff * Math.random());\n    var r = num >> 16;\n    var g = (num >> 8) & 255;\n    var b = num & 255;\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n\n  const updateStyle = async () => {\n    const widget = await miro.board.widgets.get({ id: \"3074457358467686032\" });\n    console.log(\"Chegou aqui 2\");\n    miro.board.widgets.update({\n      id: widget[0].id,\n      style: {\n        ...widget[0].style,\n        background: `linear-gradient(90deg, ${getRandomRgb()} 0%, rgba(255,255,255,1) 50%, rgba(255,255,255,1) 100%)`\n      },\n    });\n    console.log(\"Chegou aqui 3\");\n  };\n\n  const handleClick = async () => {\n    let allStickers = await miro.board.widgets.get({ type: \"shape\" });\n    console.log(allStickers);\n    let allFrames = await miro.board.widgets.get({ type: \"frame\" });\n    console.log(allFrames);\n    let allCurves = await miro.board.widgets.get({ type: \"curve\" });\n    console.log(allCurves);\n    let allLines = await miro.board.widgets.get({ type: \"line\" });\n    console.log(allLines);\n  };\n\n  const changeStyle = () => {\n    miro.board.widgets.get({ type: constants.SHAPE }).then((widgets) => {\n      console.log(\"Chegou aqui 1\");\n      widgets.forEach((widget) => {\n        updateStyle(widget.id);\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.14</p>\n        <button onClick={() => handleClick()}>Click Here</button>\n        <button onClick={() => changeStyle()}>Change Style</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n"],"sourceRoot":""}