{"version":3,"sources":["logo.svg","calcs.js","app.js"],"names":["squarePerimeter","width","height","App","updateMetadata","widgetId","a","console","log","miro","board","widgets","get","id","widget","update","metadata","area","perimeter","onReady","addListener","event","data","type","handleClick","allStickers","allFrames","allCurves","className","src","logo","alt","onClick","ReactDOM","render","document","getElementById"],"mappings":"iMAAe,MAA0B,iC,6BCG5BA,EAAkB,SAACC,EAAOC,GAAR,OAAmB,EAAID,EAAQ,EAAIC,G,eCQlE,SAASC,IACP,IAAMC,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACrBC,QAAQC,IAAIH,GADS,SAEAI,KAAKC,MAAMC,QAAQC,IAAI,CAAEC,GAAIR,IAF7B,OAEfS,EAFe,OAGrBP,QAAQC,IAAIM,GAEZL,KAAKC,MAAMC,QAAQI,OAAO,CACxBF,GAAIC,EAAO,GAAGD,GACdG,SAAU,CACR,sBAAuB,CACrBC,MDpBiBhB,ECoBAa,EAAOb,MDpBAC,ECoBOY,EAAOZ,ODpBHD,EAAQC,GCqB3CgB,UAAWlB,EAAgBc,EAAOb,MAAOa,EAAOZ,YAVjC,iCDXC,IAACD,EAAOC,ICWT,OAAH,sDAgBpBO,KAAKU,SAAQ,WACXV,KAAKW,YAAY,qBAAqB,SAACN,GACrCP,QAAQC,IAAI,qBACZD,QAAQC,IAAIM,MAGdL,KAAKW,YAAY,mBAAmB,SAACC,GACnCd,QAAQC,IAAI,mBACe,UAAvBa,EAAMC,KAAK,GAAGC,MAChBnB,EAAeiB,EAAMC,KAAK,GAAGT,OAIjCJ,KAAKW,YAAY,mBAAmB,SAACN,GACnCP,QAAQC,IAAI,mBACZD,QAAQC,IAAIM,MAGdL,KAAKW,YAAY,kCAAkC,SAACN,GAClDP,QAAQC,IAAI,kCACZD,QAAQC,IAAIM,MAGdL,KAAKW,YAAY,sBAAsB,SAACN,GACtCP,QAAQC,IAAI,sBACZD,QAAQC,IAAIM,SAIhB,IAAMU,EAAW,uCAAG,gCAAAlB,EAAA,sEACMG,KAAKC,MAAMC,QAAQC,IAAI,CAAEW,KAAM,UADrC,cACdE,EADc,OAElBlB,QAAQC,IAAIiB,GAFM,SAGIhB,KAAKC,MAAMC,QAAQC,IAAI,CAAEW,KAAM,UAHnC,cAGdG,EAHc,OAIlBnB,QAAQC,IAAIkB,GAJM,UAKIjB,KAAKC,MAAMC,QAAQC,IAAI,CAAEW,KAAM,UALnC,QAKdI,EALc,OAMlBpB,QAAQC,IAAImB,GANM,4CAAH,qDASjB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,gDACA,wBAAQC,QAAS,kBAAMR,KAAvB,6BAMRS,IAASC,OAAO,cAAC/B,EAAD,IAASgC,SAASC,eAAe,U","file":"static/js/app.87c26116.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-undef */\nexport const squareArea = (width, height) => width * height;\n\nexport const squarePerimeter = (width, height) => 2 * width + 2 * height;\n","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { squareArea, squarePerimeter } from \"./calcs\";\n\nimport \"./index.css\";\n\nfunction App() {\n  const updateMetadata = async (widgetId) => {\n    console.log(widgetId);\n    const widget = await miro.board.widgets.get({ id: widgetId });\n    console.log(widget);\n    // console.log(\"Widget = \", widget);\n    miro.board.widgets.update({\n      id: widget[0].id,\n      metadata: {\n        \"3074457358398558776\": {\n          area: squareArea(widget.width, widget.height),\n          perimeter: squarePerimeter(widget.width, widget.height),\n        },\n      },\n    });\n  };\n\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n\n    miro.addListener(\"WIDGETS_CREATED\", (event) => {\n      console.log(\"WIDGETS_CREATED\");\n      if (event.data[0].type === \"SHAPE\") {\n        updateMetadata(event.data[0].id);\n      }\n    });\n\n    miro.addListener(\"WIDGETS_DELETED\", (widget) => {\n      console.log(\"WIDGETS_DELETED\");\n      console.log(widget);\n    });\n\n    miro.addListener(\"WIDGETS_TRANSFORMATION_UPDATED\", (widget) => {\n      console.log(\"WIDGETS_TRANSFORMATION_UPDATED\");\n      console.log(widget);\n    });\n\n    miro.addListener(\"ALL_WIDGETS_LOADED\", (widget) => {\n      console.log(\"ALL_WIDGETS_LOADED\");\n      console.log(widget);\n    });\n  });\n\n  const handleClick = async () => {\n    let allStickers = await miro.board.widgets.get({ type: \"shape\" });\n    console.log(allStickers);\n    let allFrames = await miro.board.widgets.get({ type: \"frame\" });\n    console.log(allFrames);\n    let allCurves = await miro.board.widgets.get({ type: \"curve\" });\n    console.log(allCurves);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.9</p>\n        <button onClick={() => handleClick()}>Click Here</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n"],"sourceRoot":""}