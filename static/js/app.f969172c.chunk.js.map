{"version":3,"sources":["constants.js","logo.svg","app.js"],"names":["SHAPE","LINE","FULL","QUARTER","HALF","APP_ID","AVAILABLE_AREA_TYPES","AVAILABLE_SHAPES","RECTANGLE","CIRCLE","TRIANGLE","PARALLELOGRAM","App","miro","onReady","addListener","widget","console","log","handleClick","a","board","widgets","get","type","allShapes","className","src","logo","alt","onClick","updateStyle","ReactDOM","render","document","getElementById"],"mappings":"oHAAA,gRAAO,IAAMA,EAAQ,QACRC,EAAO,OACPC,EAAO,OACPC,EAAU,UACVC,EAAO,OACPC,EAAS,sBACTC,EAAuB,CAACJ,EAAME,EAAMD,GACpCI,EAAmB,CAC9BC,UAAW,EACXC,OAAQ,EACRC,SAAU,EACVC,cAAe,K,4GCXF,MAA0B,iC,mDCUzC,SAASC,IACPC,KAAKC,SAAQ,WACXD,KAAKE,YAAY,qBAAqB,SAACC,GACrCC,QAAQC,IAAI,qBACZD,QAAQC,IAAIF,SAIhB,IAAMG,EAAW,uCAAG,4BAAAC,EAAA,sEACIP,KAAKQ,MAAMC,QAAQC,IAAI,CAAEC,KAAMxB,MADnC,OACdyB,EADc,OAElBR,QAAQC,IAAIO,GAFM,2CAAH,qDAKjB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,iDACA,yDACA,yDACA,4DACA,+DACA,+DACA,+DACA,0DACA,0DACA,wBAAQC,QAAS,kBAAMX,KAAvB,wBACA,wBAAQW,QAAS,kBAAMC,eAAvB,+BAMRC,IAASC,OAAO,cAACrB,EAAD,IAASsB,SAASC,eAAe,U","file":"static/js/app.f969172c.chunk.js","sourcesContent":["export const SHAPE = \"SHAPE\";\nexport const LINE = \"LINE\";\nexport const FULL = \"full\";\nexport const QUARTER = \"quarter\";\nexport const HALF = \"half\";\nexport const APP_ID = \"3074457358398558776\";\nexport const AVAILABLE_AREA_TYPES = [FULL, HALF, QUARTER];\nexport const AVAILABLE_SHAPES = {\n  RECTANGLE: 3,\n  CIRCLE: 4,\n  TRIANGLE: 5,\n  PARALLELOGRAM: 10,\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { SHAPE } from \"./constants\";\n\nfunction App() {\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n  });\n\n  const handleClick = async () => {\n    let allShapes = await miro.board.widgets.get({ type: SHAPE });\n    console.log(allShapes);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.15</p>\n        <button>Create Full Ellipse</button>\n        <button>Create Half Ellipse</button>\n        <button>Create Quarter Ellipse</button>\n        <button>Create Full Quadrilateral</button>\n        <button>Create Full Parallelogram</button>\n        <button>Create Half Parallelogram</button>\n        <button>Create Full Triangle</button>\n        <button>Create Half Triangle</button>\n        <button onClick={() => handleClick()}>Click Here</button>\n        <button onClick={() => updateStyle()}>Change Style</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n"],"sourceRoot":""}