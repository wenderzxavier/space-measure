{"version":3,"sources":["logo.svg","constants.js","Listeners/WidgetsUpdate.js","app.js"],"names":["APP_ID","AVAILABLE_SHAPES","RECTANGLE","CIRCLE","TRIANGLE","PARALLELOGRAM","SHAPES","App","miro","onReady","addListener","widget","console","log","handleClick","a","board","widgets","get","type","allShapes","forEach","differentArea","metadata","areaType","Object","values","includes","style","shapeType","push","id","area","perimeter","className","src","logo","alt","onClick","updateStyle","ReactDOM","render","document","getElementById"],"mappings":"qOAAe,MAA0B,iC,mDCG5BA,EAAS,sBACTC,EAAmB,CAC9BC,UAAW,EACXC,OAAQ,EACRC,SAAU,EACVC,cAAe,ICLNC,EAAS,G,OCQpB,SAASC,IACPC,KAAKC,SAAQ,WACXD,KAAKE,YAAY,qBAAqB,SAACC,GACrCC,QAAQC,IAAI,qBACZD,QAAQC,IAAIF,SAIhB,IAAMG,EAAW,uCAAG,4BAAAC,EAAA,sEACIP,KAAKQ,MAAMC,QAAQC,IAAI,CAAEC,KFpB9B,UEmBC,OACdC,EADc,ODXpBd,EAAS,GCaMc,EDZPC,SAAQ,SAACV,GAAY,IAAD,EACtBW,EAAgB,QAEpB,UAAIX,EAAOY,SAASvB,UAApB,aAAI,EAAyBwB,YAC3BF,EAAgBX,EAAOY,SAASvB,GAAQwB,UAGtCC,OAAOC,OAAOzB,GAAkB0B,SAAShB,EAAOiB,MAAMC,YACxDvB,EAAOwB,KAAK,CACVC,GAAIpB,EAAOoB,GACXR,SAAS,eACNvB,EADK,2BAEDW,EAAOY,SAASvB,IAFf,IAGJgC,UAA4BrB,EAAOiB,MAAMC,UACzCI,eAAsCtB,EAAOiB,MAAMC,UACnDL,SAAUF,UCFlBV,QAAQC,IAAIP,GAHM,2CAAH,qDAYjB,OACE,qBAAK4B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,iDACA,wBAAQC,QAAS,kBAAMxB,KAAvB,wBACA,wBAAQwB,QAAS,kBAAMC,eAAvB,+BAMRC,IAASC,OAAO,cAAClC,EAAD,IAASmC,SAASC,eAAe,W","file":"static/js/app.bb2eda2f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const SHAPE = \"SHAPE\";\nexport const QUARTER = \"quarter\";\nexport const HALF = \"half\";\nexport const APP_ID = \"3074457358398558776\";\nexport const AVAILABLE_SHAPES = {\n  RECTANGLE: 3,\n  CIRCLE: 4,\n  TRIANGLE: 5,\n  PARALLELOGRAM: 10,\n};\n","import { AVAILABLE_SHAPES, APP_ID } from \"../constants\";\nimport { calculateAreaForShape, calculatePerimeterForShape } from \"../calcs\";\n\nexport let SHAPES = [];\nexport let LINES = [];\nexport let GROUPS = [];\n\nexport const updateShapes = (widgets) => {\n  SHAPES = [];\n  widgets.forEach((widget) => {\n    let differentArea = \"full\";\n\n    if (widget.metadata[APP_ID]?.areaType) {\n      differentArea = widget.metadata[APP_ID].areaType;\n    }\n\n    if (Object.values(AVAILABLE_SHAPES).includes(widget.style.shapeType))\n      SHAPES.push({\n        id: widget.id,\n        metadata: {\n          [APP_ID]: {\n            ...widget.metadata[APP_ID],\n            area: calculateAreaForShape(widget.style.shapeType, differentArea),\n            perimeter: calculatePerimeterForShape(widget.style.shapeType, differentArea),\n            areaType: differentArea\n          },\n        },\n      });\n  });\n};\n","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { SHAPES, updateShapes } from \"./Listeners/WidgetsUpdate\";\nimport { SHAPE } from \"./constants\";\n\nfunction App() {\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n  });\n\n  const handleClick = async () => {\n    let allShapes = await miro.board.widgets.get({ type: SHAPE });\n    updateShapes(allShapes);\n    console.log(SHAPES);\n    // let allFrames = await miro.board.widgets.get({ type: \"frame\" });\n    // console.log(allFrames);\n    // let allCurves = await miro.board.widgets.get({ type: \"curve\" });\n    // console.log(allCurves);\n    // let allLines = await miro.board.widgets.get({ type: \"line\" });\n    // console.log(allLines);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.15</p>\n        <button onClick={() => handleClick()}>Click Here</button>\n        <button onClick={() => updateStyle()}>Change Style</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n"],"sourceRoot":""}