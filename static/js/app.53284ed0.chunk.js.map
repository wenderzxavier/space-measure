{"version":3,"sources":["constants.js","calcs.js","Listeners/WidgetsCreated.js","Listeners/WidgetsUpdate.js","logo.svg","app.js"],"names":["SHAPE","LINE","FULL","QUARTER","HALF","APP_ID","AVAILABLE_AREA_TYPES","AVAILABLE_SHAPES","RECTANGLE","ELLIPSE","TRIANGLE","PARALLELOGRAM","SHAPE_NAME","3","4","5","10","parallelogramArea","width","height","parallelogramPerimeter","calculateLength","x1","y1","x2","y2","Math","sqrt","pow","calculateAreaForShape","shape","areaType","base","area","toLowerCase","triangleArea","horizontalDiameter","verticalDiameter","verticalRadius","horizontalRadius","PI","ellipseArea","calculatePerimeterForShape","perimeter","trianglePerimeter","ellipsePerimeter","WIDTH","HEIGHT","createShape","a","miro","board","viewport","get","boardCenter","positionX","x","positionY","y","widgets","create","type","text","charAt","toUpperCase","slice","metadata","style","shapeType","addMetadataToWidget","widgetId","id","widget","console","log","Object","values","includes","update","LOCAL_SHAPES","LOCAL_LINES","LOCAL_GROUPS","updateMiroShape","updateShapesAreaPerimeter","splice","length","forEach","calculatedArea","calculatedPerimeter","push","groupId","updateLocalShapes","currentArea","updateLinesLengths","startPosition","endPosition","calculatedLength","App","onReady","addListener","handleClick","allShapes","className","src","logo","alt","onClick","updateStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/app.53284ed0.chunk.js","sourcesContent":["export const SHAPE = \"SHAPE\";\nexport const LINE = \"LINE\";\nexport const FULL = \"full\";\nexport const QUARTER = \"quarter\";\nexport const HALF = \"half\";\nexport const APP_ID = \"3074457358398558776\";\nexport const AVAILABLE_AREA_TYPES = [FULL, HALF, QUARTER];\nexport const AVAILABLE_SHAPES = {\n  RECTANGLE: 3,\n  ELLIPSE: 4,\n  TRIANGLE: 5,\n  PARALLELOGRAM: 10,\n};\nexport const SHAPE_NAME = {\n  3: \"Rectangle\",\n  4: \"Ellipse\",\n  5: \"Triangle\",\n  10: \"Parallelogram\",\n};\n","/* eslint-disable no-undef */\nimport { AVAILABLE_SHAPES, HALF, QUARTER } from \"./constants\";\n\nconst parallelogramArea = (width, height) => width * height;\n\nconst parallelogramPerimeter = (width, height) => width * 2 + height * 2;\n\nconst ellipseArea = (horizontalDiameter, verticalDiameter, areaType) => {\n  const verticalRadius = verticalDiameter / 2;\n  const horizontalRadius = horizontalDiameter / 2;\n\n  const area = Math.PI * verticalRadius * horizontalRadius;\n\n  if (areaType.toLowerCase() === QUARTER) return area / 4;\n\n  if (areaType.toLowerCase() === HALF) return area / 2;\n\n  return area;\n};\n\nconst ellipsePerimeter = (horizontalDiameter, verticalDiameter, areaType) => {\n  const verticalRadius = verticalDiameter / 2;\n  const horizontalRadius = horizontalDiameter / 2;\n\n  const perimeter =\n    Math.PI *\n    (3 * (horizontalRadius + verticalRadius) -\n      Math.sqrt(\n        (3 * horizontalRadius + verticalRadius) *\n          (horizontalRadius + 3 * verticalRadius)\n      ));\n\n  if (areaType.toLowerCase() === QUARTER) return perimeter / 4;\n\n  if (areaType.toLowerCase() === HALF) return perimeter / 2;\n\n  return perimeter;\n};\n\nconst triangleArea = (base, height, areaType) => {\n  const area = (base * height) / 2;\n\n  if (areaType.toLowerCase() === HALF) return area / 2;\n\n  return area;\n};\n\nconst trianglePerimeter = (base, height, areaType) => {\n  const perimeter =\n    base + Math.sqrt(Math.pow(base, 2) + 4 * Math.pow(height, 2));\n\n  if (areaType.toLowerCase() === HALF) return perimeter / 2;\n\n  return perimeter;\n};\n\n// export const updateShapeMetadata = async (widgetId) => {\n//   const widget = await miro.board.widgets.get({ id: widgetId });\n//   miro.board.widgets.update({\n//     id: widget[0].id,\n//     metadata: {\n//       \"3074457358398558776\": {\n//         area: squareArea(widget[0].width, widget[0].height),\n//         perimeter: squarePerimeter(widget[0].width, widget[0].height),\n//       },\n//     },\n//   });\n// };\n\nexport const calculateLength = (x1, y1, x2, y2) =>\n  Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n\nexport const calculateAreaForShape = (shape, width, height, areaType) => {\n  switch (shape) {\n    case AVAILABLE_SHAPES.RECTANGLE:\n      return parallelogramArea(width, height);\n    case AVAILABLE_SHAPES.TRIANGLE:\n      return triangleArea(width, height, areaType);\n    case AVAILABLE_SHAPES.ELLIPSE:\n      return ellipseArea(width, height, areaType);\n    case AVAILABLE_SHAPES.PARALLELOGRAM:\n      return parallelogramArea(width, height);\n    default:\n      return undefined;\n  }\n};\n\nexport const calculatePerimeterForShape = (shape, width, height, areaType) => {\n  switch (shape) {\n    case AVAILABLE_SHAPES.RECTANGLE:\n      return parallelogramPerimeter(width, height);\n    case AVAILABLE_SHAPES.TRIANGLE:\n      return trianglePerimeter(width, height, areaType);\n    case AVAILABLE_SHAPES.ELLIPSE:\n      return ellipsePerimeter(width, height, areaType);\n    case AVAILABLE_SHAPES.PARALLELOGRAM:\n      return parallelogramPerimeter(width, height);\n    default:\n      return undefined;\n  }\n};\n","import { calculateAreaForShape, calculatePerimeterForShape } from \"../calcs\";\nimport {\n  APP_ID,\n  AVAILABLE_SHAPES,\n  SHAPE,\n  FULL,\n  SHAPE_NAME,\n} from \"../constants\";\n\nconst WIDTH = 200;\nconst HEIGHT = 200;\n\n/* eslint-disable no-undef */\nexport const createShape = async (\n  areaType = FULL,\n  shape = AVAILABLE_SHAPES.RECTANGLE\n) => {\n  const boardCenter = await miro.board.viewport.get();\n  const positionX = boardCenter.x + boardCenter.width / 2;\n  const positionY = boardCenter.y + boardCenter.height / 2;\n  miro.board.widgets.create({\n    type: SHAPE,\n    text: `${areaType.charAt(0).toUpperCase() + areaType.slice(1)} ${\n      SHAPE_NAME[shape]\n    }`,\n    height: HEIGHT,\n    width: WIDTH,\n    metadata: {\n      [APP_ID]: {\n        area: calculateAreaForShape(shape, WIDTH, HEIGHT, areaType),\n        perimeter: calculatePerimeterForShape(shape, WIDTH, HEIGHT, areaType),\n        areaType: areaType,\n      },\n    },\n    style: {\n      shapeType: shape,\n    },\n    x: positionX,\n    y: positionY,\n  });\n\n  miro.board.viewport.get({\n    viewport: { x: positionX, y: positionY },\n  });\n};\n\nexport const addMetadataToWidget = async (widgetId) => {\n  const widget = (await miro.board.widgets.get({ id: widgetId }))[0];\n  console.log(\"addMetadataToWidget Widget = \");\n  console.log(widget);\n  if (Object.values(AVAILABLE_SHAPES).includes(widget.style.shapeType))\n    miro.board.widgets.update({\n      id: widget[0].id,\n      metadata: {\n        [APP_ID]: {\n          area: calculateAreaForShape(\n            widget.style.shapeType,\n            widget.width,\n            widget.height,\n            FULL\n          ),\n          perimeter: calculatePerimeterForShape(\n            widget.style.shapeType,\n            widget.width,\n            widget.height,\n            FULL\n          ),\n          areaType: FULL,\n        },\n      },\n    });\n};\n","/* eslint-disable no-undef */\nimport {\n  AVAILABLE_SHAPES,\n  APP_ID,\n  FULL,\n  AVAILABLE_AREA_TYPES,\n} from \"../constants\";\nimport {\n  calculateAreaForShape,\n  calculateLength,\n  calculatePerimeterForShape,\n} from \"../calcs\";\n\nexport const LOCAL_SHAPES = [];\nexport const LOCAL_LINES = [];\nexport const LOCAL_GROUPS = [];\n\nconst updateMiroShape = (id, metadata) => {\n  console.log(\"Update Miro Shape\");\n  console.log(id);\n  console.log(metadata);\n  miro.board.widgets.update({\n    id,\n    metadata: {\n      [APP_ID]: {\n        ...metadata,\n      },\n    },\n  });\n};\n\nconst updateLocalShapes = (widget, areaType, area, perimeter) =>\n  LOCAL_SHAPES.push({\n    id: widget.id,\n    areaType,\n    area,\n    perimeter,\n    width: widget.width,\n    height: widget.height,\n    groupId: widget.groupId,\n    shapeType: widget.style.shapeType,\n  });\n\nexport const updateShapesAreaPerimeter = (widgets) => {\n  console.log(\"UpdateShapeAreaPerimeter\");\n  LOCAL_SHAPES.splice(0, LOCAL_SHAPES.length);\n  widgets.forEach((widget) => {\n    let areaType = widget.metadata[APP_ID]?.areaType || FULL;\n    let area = widget.metadata[APP_ID]?.area || 0;\n    let perimeter = widget.metadata[APP_ID]?.perimeter || 0;\n\n    console.log(\"Widget Area / Perimeter\");\n    console.log(area);\n    console.log(perimeter);\n    console.log(areaType);\n\n    if (!AVAILABLE_AREA_TYPES.includes(areaType)) {\n      areaType = FULL;\n    }\n\n    if (Object.values(AVAILABLE_SHAPES).includes(widget.style.shapeType)) {\n      const calculatedArea = calculateAreaForShape(\n        widget.style.shapeType,\n        widget.width,\n        widget.height,\n        areaType\n      );\n\n      const calculatedPerimeter = calculatePerimeterForShape(\n        widget.style.shapeType,\n        widget.width,\n        widget.height,\n        areaType\n      );\n\n      console.log(\"Calculates area / Perimete\");\n      console.log(calculatedArea);\n      console.log(calculatedPerimeter);\n\n      updateLocalShapes(widget, areaType, calculatedArea, calculatedPerimeter);\n\n      if (widget.groupId) {\n        const currentArea = LOCAL_GROUPS[widget.groupId] || 0;\n        LOCAL_GROUPS[widget.groupId] = currentArea + calculatedArea;\n      }\n\n      if (\n        area !== calculatedArea ||\n        perimeter !== calculatedPerimeter ||\n        widget.metadata[APP_ID].areaType !== areaType\n      ) {\n        updateMiroShape(widget.id, {\n          area: calculatedArea,\n          perimeter: calculatedPerimeter,\n          areaType,\n        });\n      }\n    }\n  });\n};\n\nexport const updateLinesLengths = (widgets) => {\n  LOCAL_LINES.splice(0, LOCAL_LINES.length);\n\n  widgets.forEach((widget) => {\n    let length = widget.metadata[APP_ID]?.length || 0;\n\n    const { startPosition, endPosition } = widget;\n\n    const calculatedLength = calculateLength(\n      startPosition.x,\n      startPosition.y,\n      endPosition.x,\n      endPosition.y\n    );\n\n    if (calculatedLength !== length) {\n      updateMiroShape(widget.id, { length: calculatedLength });\n    }\n  });\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { AVAILABLE_SHAPES, FULL, HALF, QUARTER, SHAPE } from \"./constants\";\n\nimport {\n  LOCAL_SHAPES,\n  LOCAL_LINES,\n  LOCAL_GROUPS,\n} from \"./Listeners/WidgetsUpdate\";\nimport { createShape } from \"./Listeners/WidgetsCreated\";\n\nfunction App() {\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n  });\n\n  console.log(LOCAL_SHAPES);\n  console.log(LOCAL_LINES);\n  console.log(LOCAL_GROUPS);\n\n  const handleClick = async () => {\n    let allShapes = await miro.board.widgets.get({ type: SHAPE });\n    console.log(allShapes);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.15</p>\n        <button onClick={() => createShape(FULL, AVAILABLE_SHAPES.ELLIPSE)}>\n          Create Full Ellipse\n        </button>\n        <button onClick={() => createShape(HALF, AVAILABLE_SHAPES.ELLIPSE)}>\n          Create Half Ellipse\n        </button>\n        <button onClick={() => createShape(QUARTER, AVAILABLE_SHAPES.ELLIPSE)}>\n          Create Quarter Ellipse\n        </button>\n        <button onClick={() => createShape(FULL, AVAILABLE_SHAPES.RECTANGLE)}>\n          Create Full Quadrilateral\n        </button>\n        <button\n          onClick={() => createShape(FULL, AVAILABLE_SHAPES.PARALLELOGRAM)}\n        >\n          Create Full Parallelogram\n        </button>\n        <button\n          onClick={() => createShape(HALF, AVAILABLE_SHAPES.PARALLELOGRAM)}\n        >\n          Create Half Parallelogram\n        </button>\n        <button onClick={() => createShape(FULL, AVAILABLE_SHAPES.TRIANGLE)}>\n          Create Full Triangle\n        </button>\n        <button onClick={() => createShape(HALF, AVAILABLE_SHAPES.TRIANGLE)}>\n          Create Half Triangle\n        </button>\n        <button onClick={() => handleClick()}>Click Here</button>\n        <button onClick={() => updateStyle()}>Change Style</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n"],"sourceRoot":""}