{"version":3,"sources":["constants.js","logo.svg","app.js","calcs.js","Listeners/WidgetsUpdate.js"],"names":["SHAPE","LINE","FULL","QUARTER","HALF","APP_ID","AVAILABLE_AREA_TYPES","AVAILABLE_SHAPES","RECTANGLE","CIRCLE","TRIANGLE","PARALLELOGRAM","App","miro","onReady","addListener","widget","console","log","LOCAL_SHAPES","LOCAL_LINES","LOCAL_GROUPS","handleClick","a","board","widgets","get","type","allShapes","className","src","logo","alt","onClick","updateStyle","ReactDOM","render","document","getElementById","parallelogramArea","width","height","parallelogramPerimeter","calculateAreaForShape","shape","areaType","base","area","toLowerCase","triangleArea","horizontalDiameter","verticalDiameter","verticalRadius","horizontalRadius","Math","PI","ellipseArea","calculatePerimeterForShape","perimeter","sqrt","pow","trianglePerimeter","ellipsePerimeter","updateMiroShape","id","metadata","update","updateShapesAreaPerimeter","splice","length","forEach","includes","Object","values","style","shapeType","calculatedArea","calculatedPerimeter","push","groupId","updateLocalShapes","currentArea","updateLinesLengths","x1","y1","x2","y2","startPosition","endPosition","calculatedLength","x","y"],"mappings":"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","file":"static/js/app.0c201bcd.chunk.js","sourcesContent":["export const SHAPE = \"SHAPE\";\nexport const LINE = \"LINE\";\nexport const FULL = \"full\";\nexport const QUARTER = \"quarter\";\nexport const HALF = \"half\";\nexport const APP_ID = \"3074457358398558776\";\nexport const AVAILABLE_AREA_TYPES = [FULL, HALF, QUARTER];\nexport const AVAILABLE_SHAPES = {\n  RECTANGLE: 3,\n  CIRCLE: 4,\n  TRIANGLE: 5,\n  PARALLELOGRAM: 10,\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { SHAPE } from \"./constants\";\n\nimport {\n  LOCAL_SHAPES,\n  LOCAL_LINES,\n  LOCAL_GROUPS,\n} from \"./Listeners/WidgetsUpdate\";\n\nfunction App() {\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n  });\n\n  console.log(LOCAL_SHAPES);\n  console.log(LOCAL_LINES);\n  console.log(LOCAL_GROUPS);\n\n  const handleClick = async () => {\n    let allShapes = await miro.board.widgets.get({ type: SHAPE });\n    console.log(allShapes);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.15</p>\n        <button>Create Full Ellipse</button>\n        <button>Create Half Ellipse</button>\n        <button>Create Quarter Ellipse</button>\n        <button>Create Full Quadrilateral</button>\n        <button>Create Full Parallelogram</button>\n        <button>Create Half Parallelogram</button>\n        <button>Create Full Triangle</button>\n        <button>Create Half Triangle</button>\n        <button onClick={() => handleClick()}>Click Here</button>\n        <button onClick={() => updateStyle()}>Change Style</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n","/* eslint-disable no-undef */\nimport { AVAILABLE_SHAPES, HALF, QUARTER } from \"./constants\";\n\nconst parallelogramArea = (width, height) => width * height;\n\nconst parallelogramPerimeter = (width, height) => width * 2 + height * 2;\n\nconst ellipseArea = (horizontalDiameter, verticalDiameter, areaType) => {\n  const verticalRadius = verticalDiameter / 2;\n  const horizontalRadius = horizontalDiameter / 2;\n\n  const area = Math.PI * verticalRadius * horizontalRadius;\n\n  if (areaType.toLowerCase() === QUARTER) return area / 4;\n\n  if (areaType.toLowerCase() === HALF) return area / 2;\n\n  return area;\n};\n\nconst ellipsePerimeter = (horizontalDiameter, verticalDiameter, areaType) => {\n  const verticalRadius = verticalDiameter / 2;\n  const horizontalRadius = horizontalDiameter / 2;\n\n  const perimeter =\n    Math.PI *\n    (3 * (horizontalRadius + verticalRadius) -\n      Math.sqrt(\n        (3 * horizontalRadius + verticalRadius) *\n          (horizontalRadius + 3 * verticalRadius)\n      ));\n\n  if (areaType.toLowerCase() === QUARTER) return perimeter / 4;\n\n  if (areaType.toLowerCase() === HALF) return perimeter / 2;\n\n  return perimeter;\n};\n\nconst triangleArea = (base, height, areaType) => {\n  const area = (base * height) / 2;\n\n  if (areaType.toLowerCase() === HALF) return area / 2;\n\n  return area;\n};\n\nconst trianglePerimeter = (base, height, areaType) => {\n  const perimeter =\n    base + Math.sqrt(Math.pow(base, 2) + 4 * Math.pow(height, 2));\n\n  if (areaType.toLowerCase() === HALF) return perimeter / 2;\n\n  return perimeter;\n};\n\n// export const updateShapeMetadata = async (widgetId) => {\n//   const widget = await miro.board.widgets.get({ id: widgetId });\n//   miro.board.widgets.update({\n//     id: widget[0].id,\n//     metadata: {\n//       \"3074457358398558776\": {\n//         area: squareArea(widget[0].width, widget[0].height),\n//         perimeter: squarePerimeter(widget[0].width, widget[0].height),\n//       },\n//     },\n//   });\n// };\n\nexport const calculateLength = (x1, y1, x2, y2) =>\n  Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n\nexport const calculateAreaForShape = (shape, width, height, areaType) => {\n  console.log(shape);\n  console.log(width);\n  console.log(height);\n  console.log(areaType);\n  switch (shape) {\n    case AVAILABLE_SHAPES.RECTANGLE:\n      return parallelogramArea(width, height);\n    case AVAILABLE_SHAPES.TRIANGLE:\n      return triangleArea(width, height, areaType);\n    case AVAILABLE_SHAPES.CIRCLE:\n      return ellipseArea(width, height, areaType);\n    case AVAILABLE_SHAPES.PARALLELOGRAM:\n      return parallelogramArea(width, height);\n    default:\n      return undefined;\n  }\n};\n\nexport const calculatePerimeterForShape = (shape, width, height, areaType) => {\n  switch (shape) {\n    case AVAILABLE_SHAPES.RECTANGLE:\n      return parallelogramPerimeter(width, height);\n    case AVAILABLE_SHAPES.TRIANGLE:\n      return trianglePerimeter(width, height, areaType);\n    case AVAILABLE_SHAPES.CIRCLE:\n      return ellipsePerimeter(width, height, areaType);\n    case AVAILABLE_SHAPES.PARALLELOGRAM:\n      return parallelogramPerimeter(width, height);\n    default:\n      return undefined;\n  }\n};\n","/* eslint-disable no-undef */\nimport {\n  AVAILABLE_SHAPES,\n  APP_ID,\n  FULL,\n  AVAILABLE_AREA_TYPES,\n} from \"../constants\";\nimport {\n  calculateAreaForShape,\n  calculateLength,\n  calculatePerimeterForShape,\n} from \"../calcs\";\n\nexport const LOCAL_SHAPES = [];\nexport const LOCAL_LINES = [];\nexport const LOCAL_GROUPS = [];\n\nconst updateMiroShape = (id, metadata) => {\n  miro.board.widgets.update({\n    id,\n    metadata: {\n      [APP_ID]: {\n        ...metadata,\n      },\n    },\n  });\n};\n\nconst updateLocalShapes = (widget, areaType, area, perimeter) =>\n  LOCAL_SHAPES.push({\n    id: widget.id,\n    areaType,\n    area,\n    perimeter,\n    width: widget.width,\n    height: widget.height,\n    groupId: widget.groupId,\n    shapeType: widget.style.shapeType,\n  });\n\nexport const updateShapesAreaPerimeter = (widgets) => {\n  LOCAL_SHAPES.splice(0, LOCAL_SHAPES.length);\n  widgets.forEach((widget) => {\n    let areaType = widget.metadata[APP_ID]?.areaType || FULL;\n    let area = widget.metadata[APP_ID]?.area || 0;\n    let perimeter = widget.metadata[APP_ID]?.perimeter || 0;\n\n    if (!AVAILABLE_AREA_TYPES.includes(areaType)) {\n      areaType = FULL;\n    }\n\n    if (Object.values(AVAILABLE_SHAPES).includes(widget.style.shapeType)) {\n      const calculatedArea = calculateAreaForShape(\n        widget.style.shapeType,\n        widget.width,\n        widget.height,\n        areaType\n      );\n\n      const calculatedPerimeter = calculatePerimeterForShape(\n        widget.style.shapeType,\n        widget.width,\n        widget.height,\n        areaType\n      );\n\n      updateLocalShapes(widget, areaType, calculatedArea, calculatedPerimeter);\n\n      if (widget.groupId) {\n        const currentArea = LOCAL_GROUPS[widget.groupId] || 0;\n        LOCAL_GROUPS[widget.groupId] = currentArea + calculatedArea;\n      }\n\n      if (\n        area !== calculatedArea ||\n        perimeter !== calculatedPerimeter ||\n        widget.metadata[APP_ID].areaType !== areaType\n      ) {\n        updateMiroShape(widget.id, {\n          calculatedArea,\n          calculatedPerimeter,\n          areaType,\n        });\n      }\n    }\n  });\n};\n\nexport const updateLinesLengths = (widgets) => {\n  LOCAL_LINES.splice(0, LOCAL_LINES.length);\n\n  widgets.forEach((widget) => {\n    let length = widget.metadata[APP_ID]?.length || 0;\n\n    const { startPosition, endPosition } = widget;\n\n    const calculatedLength = calculateLength(\n      startPosition.x,\n      startPosition.y,\n      endPosition.x,\n      endPosition.y\n    );\n\n    if (calculatedLength !== length) {\n      updateMiroShape(widget.id, { length: calculatedLength });\n    }\n  });\n};\n"],"sourceRoot":""}