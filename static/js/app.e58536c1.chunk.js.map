{"version":3,"sources":["constants.js","calcs.js","Listeners/WidgetsUpdate.js","logo.svg","app.js"],"names":["SHAPE","LINE","QUARTER","HALF","APP_ID","AVAILABLE_SHAPES","RECTANGLE","CIRCLE","TRIANGLE","PARALLELOGRAM","parallelogramArea","width","height","parallelogramPerimeter","calculateAreaForShape","shape","areaType","base","area","toLowerCase","triangleArea","horizontalDiameter","verticalDiameter","verticalRadius","horizontalRadius","Math","PI","ellipseArea","calculatePerimeterForShape","perimeter","sqrt","pow","trianglePerimeter","ellipsePerimeter","LOCAL_SHAPES","updateShapesAreaPerimeter","widgets","SHAPES","forEach","widget","metadata","Object","values","includes","style","shapeType","calculatedArea","calculatedPerimeter","push","id","groupId","updateLocalShapes","micromatch","board","update","updateMiroShape","App","miro","onReady","addListener","console","log","handleClick","a","get","type","allShapes","className","src","logo","alt","onClick","updateStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/app.e58536c1.chunk.js","sourcesContent":["export const SHAPE = \"SHAPE\";\nexport const LINE = \"LINE\"\nexport const QUARTER = \"quarter\";\nexport const HALF = \"half\";\nexport const APP_ID = \"3074457358398558776\";\nexport const AVAILABLE_SHAPES = {\n  RECTANGLE: 3,\n  CIRCLE: 4,\n  TRIANGLE: 5,\n  PARALLELOGRAM: 10,\n};\n","/* eslint-disable no-undef */\nimport { AVAILABLE_SHAPES, HALF, QUARTER } from \"./constants\";\n\nconst parallelogramArea = (width, height) => width * height;\n\nconst parallelogramPerimeter = (width, height) => width * 2 + height * 2;\n\nconst ellipseArea = (horizontalDiameter, verticalDiameter, areaType) => {\n  const verticalRadius = verticalDiameter / 2;\n  const horizontalRadius = horizontalDiameter / 2;\n\n  const area = Math.PI * verticalRadius * horizontalRadius;\n\n  if (areaType.toLowerCase() === QUARTER) return area / 4;\n\n  if (areaType.toLowerCase() === HALF) return area / 2;\n\n  return area;\n};\n\nconst ellipsePerimeter = (horizontalDiameter, verticalDiameter, areaType) => {\n  const verticalRadius = verticalDiameter / 2;\n  const horizontalRadius = horizontalDiameter / 2;\n\n  const perimeter =\n    Math.PI *\n    (3 * (horizontalRadius + verticalRadius) -\n      Math.sqrt(\n        (3 * horizontalRadius + verticalRadius) *\n          (horizontalRadius + 3 * verticalRadius)\n      ));\n\n  if (areaType.toLowerCase() === QUARTER) return perimeter / 4;\n\n  if (areaType.toLowerCase() === HALF) return perimeter / 2;\n\n  return perimeter;\n};\n\nconst triangleArea = (base, height, areaType) => {\n  const area = (base * height) / 2;\n\n  if (areaType.toLowerCase() === HALF) return area / 2;\n\n  return area;\n};\n\nconst trianglePerimeter = (base, height, areaType) => {\n  const perimeter =\n    base + Math.sqrt(Math.pow(base, 2) + 4 * Math.pow(height, 2));\n\n  if (areaType.toLowerCase() === HALF) return perimeter / 2;\n\n  return perimeter;\n};\n\n// export const updateShapeMetadata = async (widgetId) => {\n//   const widget = await miro.board.widgets.get({ id: widgetId });\n//   miro.board.widgets.update({\n//     id: widget[0].id,\n//     metadata: {\n//       \"3074457358398558776\": {\n//         area: squareArea(widget[0].width, widget[0].height),\n//         perimeter: squarePerimeter(widget[0].width, widget[0].height),\n//       },\n//     },\n//   });\n// };\n\nexport const calculateAreaForShape = (shape, width, height, areaType) => {\n  switch (shape) {\n    case AVAILABLE_SHAPES.RECTANGLE:\n      return parallelogramArea(width, height);\n    case AVAILABLE_SHAPES.TRIANGLE:\n      return triangleArea(width, height, areaType);\n    case AVAILABLE_SHAPES.CIRCLE:\n      return ellipseArea(width, height, areaType);\n    case AVAILABLE_SHAPES.PARALLELOGRAM:\n      return parallelogramArea(width, height);\n    default:\n      return undefined;\n  }\n};\n\nexport const calculatePerimeterForShape = (shape, width, height, areaType) => {\n  switch (shape) {\n    case AVAILABLE_SHAPES.RECTANGLE:\n      return parallelogramPerimeter(width, height);\n    case AVAILABLE_SHAPES.TRIANGLE:\n      return trianglePerimeter(width, height, areaType);\n    case AVAILABLE_SHAPES.CIRCLE:\n      return ellipsePerimeter(width, height, areaType);\n    case AVAILABLE_SHAPES.PARALLELOGRAM:\n      return parallelogramPerimeter(width, height);\n    default:\n      return undefined;\n  }\n};\n","/* eslint-disable no-undef */\nimport { AVAILABLE_SHAPES, APP_ID } from \"../constants\";\nimport { calculateAreaForShape, calculatePerimeterForShape } from \"../calcs\";\n\nexport let LOCAL_SHAPES = [];\nexport let LOCAL_LINES = [];\nexport let LOCAL_GROUPS = [];\n\n// const updateShapeAreas = async (widgetId, shapeType, updateArea) => {\n//   const widget = await miro.board.widgets.get({ id: widgetId });\n//   miro.board.widgets.update({\n//     id: widget[0].id,\n//     metadata: {\n//       \"3074457358398558776\": {\n//         area: squareArea(widget[0].width, widget[0].height),\n//         perimeter: squarePerimeter(widget[0].width, widget[0].height),\n//       },\n//     },\n//   });\n// };\n\nconst updateMiroShape = (id, area, perimeter, areaType) => {\n  micromatch.board.widgets.update({\n    id,\n    metadata: {\n      [APP_ID]: {\n        area,\n        perimeter,\n        areaType,\n      },\n    },\n  });\n};\n\nconst updateLocalShapes = (widget, areaType, area, perimeter) =>\n  SHAPES.push({\n    id: widget.id,\n    areaType,\n    area,\n    perimeter,\n    width: widget.width,\n    height: widget.height,\n    groupId: widget.groupId,\n    shapeType: widget.style.shapeType,\n  });\n\nexport const updateShapesAreaPerimeter = (widgets) => {\n  SHAPES = [];\n  widgets.forEach((widget) => {\n    const { area, perimeter } = widget.metadata[APP_ID];\n    let areaType = \"full\";\n\n    if (widget.metadata[APP_ID]?.areaType) {\n      areaType = widget.metadata[APP_ID].areaType;\n    }\n\n    if (Object.values(AVAILABLE_SHAPES).includes(widget.style.shapeType)) {\n      const calculatedArea = calculateAreaForShape(\n        widget.style.shapeType,\n        widget.width,\n        widget.height,\n        areaType\n      );\n\n      const calculatedPerimeter = calculatePerimeterForShape(\n        widget.style.shapeType,\n        widget.width,\n        widget.height,\n        areaType\n      );\n\n      updateLocalShapes(widget, areaType, calculatedArea, calculatedPerimeter);\n\n      if (area !== calculatedArea || perimeter !== calculatedPerimeter) {\n        updateMiroShape(\n          widget.id,\n          calculatedArea,\n          calculatedPerimeter,\n          widget.style.shapeType,\n          areaType\n        );\n      }\n    }\n  });\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable no-undef */\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { LOCAL_SHAPES } from \"./Listeners/WidgetsUpdate\";\nimport { SHAPE } from \"./constants\";\n\nfunction App() {\n  miro.onReady(() => {\n    miro.addListener(\"SELECTION_UPDATED\", (widget) => {\n      console.log(\"SELECTION_UPDATED\");\n      console.log(widget);\n    });\n  });\n\n  const handleClick = async () => {\n    let allShapes = await miro.board.widgets.get({ type: SHAPE });\n    console.log(allShapes);\n    console.log(\"LOCAL SHAPES\");\n    console.log(LOCAL_SHAPES);\n    // let allFrames = await miro.board.widgets.get({ type: \"frame\" });\n    // console.log(allFrames);\n    // let allCurves = await miro.board.widgets.get({ type: \"curve\" });\n    // console.log(allCurves);\n    // let allLines = await miro.board.widgets.get({ type: \"line\" });\n    // console.log(allLines);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>App version 1.15</p>\n        <button onClick={() => handleClick()}>Click Here</button>\n        <button onClick={() => updateStyle()}>Change Style</button>\n      </header>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// 1) Scale input: The scale on architectural drawings are used to reflect a dimension on the drawing, which corresponds to a\n// dimension in real life. And example of a scale 1/8\" = 1'; this means that 1/8 inches on the drawing will correspond to 1 feet in\n// real life. The dimensions could be in the metric system (m^2 and lm) or imperial system (Sqft and lf).\n\n// 2) Draw Polygon: I will need to draw polygons inside Miro boards. The number of pixels cover by the polygon, based on the input\n// scale, will result in the area of the polygon in SquareFeet or SquareMeters. I will be great if I will be able to draw rectangles\n// too, which a special type of polygons.\n\n// 3) Draw line: I will need to draw line segments inside Miro boards. The number of pixels cover by the line, based on the input\n// scale, will result in the length of the line in Feet or Meters.\n\n// 4) Count Shapes: I will need to count certain objects on architectural drawings. We can achieve that by clicking shapes on top\n// of the concerned object and the count those shapes. No scale or dimension is needed for the shapes... only their count.\n\n// 5) Report: I will need to be able to extract the information created using the web plug-in that will be built, into excel. The\n// idea is to compile all the information of every polygon, line, or count done on the Miro board and create a report that provides structured information.\n\n// All polygons, lines, and count will have specific properties that will be needed to be attached to each of them. Some of these properties\n// area: Name - Area - Type - Floor - Perimeter - Length - Count. As discussed on our call, these properties can be input using a new UI\n// inside Miro (example was the menu that appears on the left of the screen when selecting an object)\n"],"sourceRoot":""}